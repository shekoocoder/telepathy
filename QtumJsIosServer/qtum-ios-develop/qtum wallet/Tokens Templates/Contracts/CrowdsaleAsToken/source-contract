pragma solidity ^0.4.11;
/**
 * @title SafeMath
 * @dev Math operations with safety checks that throw on error
 */
library SafeMath {
    function mul(uint256 a, uint256 b) internal constant returns (uint256) {
        uint256 c = a * b;
        assert(a == 0 || c / a == b);
        return c;
    }
    function div(uint256 a, uint256 b) internal constant returns (uint256) {
        // assert(b > 0); // Solidity automatically throws when dividing by 0
        uint256 c = a / b;
        // assert(a == b * c + a % b); // There is no case in which this doesn't hold
        return c;
    }
    function sub(uint256 a, uint256 b) internal constant returns (uint256) {
        assert(b <= a);
        return a - b;
    }
    function add(uint256 a, uint256 b) internal constant returns (uint256) {
        uint256 c = a + b;
        assert(c >= a);
        return c;
    }
}
/**
 * @title QRC20Basic
 * @dev Simpler version of QRC20 interface
 * @dev see https://github.com/ethereum/EIPs/issues/179
 */
contract QRC20Basic {
    uint256 public totalSupply;
    function balanceOf(address _owner) constant returns (uint256 balance);
    function transfer(address _to, uint256 _value) returns (bool success);
    event Transfer(address indexed _from, address indexed _to, uint256 _value);
}
/**
 * @title Basic token
 * @dev Basic version of StandardToken, with no allowances.
 */
contract BasicToken is QRC20Basic {
    using SafeMath for uint256;
    mapping(address => uint256) balances;
    /**
    * @dev transfer token for a specified address
    * @param _to The address to transfer to.
    * @param _value The amount to be transferred.
    */
    function transfer(address _to, uint256 _value) returns (bool) {
        require(_to != address(0));
        // SafeMath.sub will throw if there is not enough balance.
        balances[msg.sender] = balances[msg.sender].sub(_value);
        balances[_to] = balances[_to].add(_value);
        Transfer(msg.sender, _to, _value);
        return true;
    }
    /**
    * @dev Gets the balance of the specified address.
    * @param _owner The address to query the the balance of.
    * @return An uint256 representing the amount owned by the passed address.
    */
    function balanceOf(address _owner) constant returns (uint256 balance) {
        return balances[_owner];
    }
}
/**
 * @title QRC20 interface
 * @dev Implements QRC20 Token Standard: https://github.com/ethereum/EIPs/issues/20
 */
contract QRC20 is QRC20Basic {
    function transferFrom(address _from, address _to, uint256 _value) returns (bool success);
    function approve(address _spender, uint256 _value) returns (bool success);
    function allowance(address _owner, address _spender) constant returns (uint256 remaining);
    event Approval(address indexed _owner, address indexed _spender, uint256 _value);
}
/**
 * @title Standard QRC20 token
 *
 * @dev Implementation of the basic standard token.
 * @dev https://github.com/ethereum/EIPs/issues/20
 * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol
 */
contract StandardToken is QRC20, BasicToken {
    mapping (address => mapping (address => uint256)) allowed;
    /**
     * @dev Transfer tokens from one address to another
     * @param _from address The address which you want to send tokens from
     * @param _to address The address which you want to transfer to
     * @param _value uint256 the amount of tokens to be transferred
     */
    function transferFrom(address _from, address _to, uint256 _value) returns (bool) {
        require(_to != address(0));
        var _allowance = allowed[_from][msg.sender];
        // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met
        // require (_value <= _allowance);
        balances[_from] = balances[_from].sub(_value);
        balances[_to] = balances[_to].add(_value);
        allowed[_from][msg.sender] = _allowance.sub(_value);
        Transfer(_from, _to, _value);
        return true;
    }
    /**
     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.
     * @param _spender The address which will spend the funds.
     * @param _value The amount of tokens to be spent.
     */
    function approve(address _spender, uint256 _value) returns (bool) {
        // To change the approve amount you first have to reduce the addresses`
        //  allowance to zero by calling `approve(_spender, 0)` if it is not
        //  already 0 to mitigate the race condition described here:
        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
        require((_value == 0) || (allowed[msg.sender][_spender] == 0));
        allowed[msg.sender][_spender] = _value;
        Approval(msg.sender, _spender, _value);
        return true;
    }
    /**
     * @dev Function to check the amount of tokens that an owner allowed to a spender.
     * @param _owner address The address which owns the funds.
     * @param _spender address The address which will spend the funds.
     * @return A uint256 specifying the amount of tokens still available for the spender.
     */
    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {
        return allowed[_owner][_spender];
    }
}
/**
 * @title Ownable
 * @dev The Ownable contract has an owner address, and provides basic authorization control
 * functions, this simplifies the implementation of "user permissions".
 */
contract Ownable {
    address public owner;
    /**
     * @dev The Ownable constructor sets the original `owner` of the contract to the sender
     * account.
     */
    function Ownable() {
        owner = msg.sender;
    }
    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        require(msg.sender == owner);
        _;
    }
    /**
     * @dev Allows the current owner to transfer control of the contract to a newOwner.
     * @param newOwner The address to transfer ownership to.
     */
    function transferOwnership(address newOwner) onlyOwner {
        require(newOwner != address(0));
        owner = newOwner;
    }
}
contract CrowdsaleToken is StandardToken, Ownable {
    // Token configurations
    string public name;
    string public symbol;
    uint256 public nativeDecimals = 8;
    uint256 public decimals;
    /// the founder address can set this to true to halt the crowdsale due to emergency
    bool public halted = false;
    uint256 public saleAmount;
    uint256 public tokenTotalSupply;
    // Crowdsale parameters
    uint256 public fundingStartBlock;
    uint256 public fundingEndBlock;
    uint256 public initialExchangeRate;
    // Events
    event Mint(uint256 supply, address indexed to, uint256 amount);
    event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);
    // Modifiers
    modifier validAddress(address _address) {
        require(_address != 0x0);
        _;
    }
    modifier validPurchase() {
        require(block.number >= fundingStartBlock);
        require(block.number <= fundingEndBlock);
        require(msg.value > 0);
        _;
    }
    modifier validUnHalt(){
        require(halted == false);
        _;
    }
    /// @notice Creates new Token contract
    function CrowdsaleToken(
    string _tokenName,
    string _tokenSymbol,
    uint256 _tokenDecimals,
    uint256 _saleTokensAmount,
    uint256 _tokenTotalSupply,
    uint256 _fundingStartBlock,
    uint256 _fundingEndBlock,
    uint256 _initialExchangeRate) {
        require(_fundingStartBlock >= block.number);
        require(_fundingEndBlock >= _fundingStartBlock);
        require(_initialExchangeRate > 0);
        assert(nativeDecimals >= decimals);
        decimals = _tokenDecimals;
        saleAmount = _saleTokensAmount * (10**decimals);
        tokenTotalSupply = _tokenTotalSupply * (10**decimals);
        fundingStartBlock = _fundingStartBlock;
        fundingEndBlock = _fundingEndBlock;
        initialExchangeRate = _initialExchangeRate;
        name = _tokenName;
        symbol = _tokenSymbol;
    }
    /// @notice Fallback function to purchase tokens
    function() external payable {
        buyTokens(msg.sender);
    }
    /// @notice Allows buying tokens from different address than msg.sender
    /// @param _beneficiary Address that will contain the purchased tokens
    function buyTokens(address _beneficiary)
    payable
    validAddress(_beneficiary)
    validPurchase
    validUnHalt
    {
        uint256 tokenAmount = getTokenExchangeAmount(msg.value, initialExchangeRate, nativeDecimals, decimals);
        uint256 checkedSupply = totalSupply.add(tokenAmount);
        // Ensure new token increment does not exceed the sale amount
        assert(checkedSupply <= saleAmount);
        mint(_beneficiary, tokenAmount);
        TokenPurchase(msg.sender, _beneficiary, msg.value, tokenAmount);
        forwardFunds();
    }
    /// @notice Allows contract owner to mint tokens at any time
    /// @param _amount Amount of tokens to mint in lowest denomination of VEVUE
    function mintReservedTokens(uint256 _amount) onlyOwner {
        uint256 checkedSupply = totalSupply.add(_amount);
        require(checkedSupply <= tokenTotalSupply);
        mint(owner, _amount);
    }
    /// @notice Shows the amount of Vevue the user will receive for amount of exchanged chong
    /// @param _Amount Exchanged chong amount to convert
    /// @param _exchangeRate Number of Vevue per exchange token
    /// @param _nativeDecimals Number of decimals of the token being exchange for Vevue
    /// @param _decimals Number of decimals of Vevue token
    /// @return The amount of Vevue that will be received
    function getTokenExchangeAmount(
    uint256 _Amount,
    uint256 _exchangeRate,
    uint256 _nativeDecimals,
    uint256 _decimals)
    constant
    returns(uint256)
    {
        require(_Amount > 0);
        uint256 differenceFactor = (10**_nativeDecimals) / (10**_decimals);
        return _Amount.mul(_exchangeRate).div(differenceFactor);
    }
    /// @dev Sends Qtum to the contract owner
    function forwardFunds() internal {
        owner.transfer(msg.value);
    }
    /// @dev Mints new tokens
    /// @param _to Address to mint the tokens to
    /// @param _amount Amount of tokens that will be minted
    /// @return Boolean to signify successful minting
    function mint(address _to, uint256 _amount) internal returns (bool) {
        totalSupply += _amount;
        balances[_to] = balances[_to].add(_amount);
        Mint(totalSupply, _to, _amount);
        return true;
    }
    /// Emergency Stop ICO
    function halt() onlyOwner {
        halted = true;
    }
    function unhalt() onlyOwner {
        halted = false;
    }
}
